---
layout: default
title: Rails Girls Heroku にアップ
permalink: heroku
---

# Heroku に Rails アプリをアップ

*Created by Terence Lee, [@hone02](https://twitter.com/hone02)*

### Heroku の準備

[quickstart guide](https://devcenter.heroku.com/articles/quickstart) の 1から3 を実施して、サインアップ、ログインしましょう。toolbelt のインストールもしてください。

__COACHより__: Heroku か、従来のサーバーか、デプロイの利点について話してみましょう。

### アプリの準備

#### Version Control Systems

We need to add our code to version control. You can do this by running the following in the terminal:

{% highlight sh %}
git init
echo "public/uploads" >> .gitignore
echo "tmp" >> .gitignore
echo "logs" >> .gitignore
git add .
git commit -m "initial commit"
{% endhighlight %}

__COACH__: This would be a good time to talk about version control systems and git, also explain the .gitignore and why we don't want these files included.

#### データベースのアップデート

まず、 Heroku で動くデータベースが必要です。いつものデータベースとは違います。 Gemfile を次のように変更しましょう。 :

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

to

{% highlight ruby %}
group :development do
  gem 'sqlite3'
end
group :production do
  gem 'pg'
end
{% endhighlight %}

そして、 `bundle install --without production` を実行してセットアップしてください。

__COACHより__: RDBMS とそうでないものについて話してみましょう。plus include some details on Heroku's dependency on Postgresql.

#### rails\_12factor の導入

次に、Heroku で Rails 4 を動かすために必要な rails\_12factor という gem を導入します。

This gem modifies the way Rails works to suit Heroku, for example Logging is updated and the configuration for static assets (your images, stylesheets and javascript files) is tweaked to work properly within Heroku's systems.

Gemfile を次のように変更しましょう。:

{% highlight ruby %}
group :production do
  gem 'pg'
end
{% endhighlight %}

to

{% highlight ruby %}
group :production do
  gem 'pg'
  gem 'rails_12factor'
end
{% endhighlight %}

もう一度、 `bundle install --without production` を実行してセットアップしてください。

{% highlight sh %}
git commit -a -m "Added rails\_12factor gem and updated Gemfile.lock"
{% endhighlight %}

__COACHより__: Heroku におけるログの仕組みについて調べてみましょう。

### アプリのデプロイ

#### アプリのcreate

Heroku のアプリを作りましょう。ターミナルで `heroku create` と入力したら、次のようなものが見られます。 :

{% highlight sh %}
Creating evening-sky-7498... done, stack is cedar
http://evening-sky-7498.herokuapp.com/ | git@heroku.com:evening-sky-7498.git
Git remote heroku added
{% endhighlight %}

この場合では、 "evening-sky-7498" がアプリの名前です。

#### コードをpush

さて、 Heroku にコードを送信しましょう。 `git push heroku master` と入力してください。そうすると、こんな出力が見られるはずです。 :

{% highlight sh %}
Counting objects: 134, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (115/115), done.
Writing objects: 100% (134/134), 35.29 KiB, done.
Total 134 (delta 26), reused 0 (delta 0)

-----> Heroku receiving push
-----> Ruby/Rails app detected
-----> Installing dependencies using Bundler version 1.1.2
       Running: bundle install --without development:test --path vendor/bundle --binstubs bin/ --deployment
       Fetching gem metadata from https://rubygems.org/.......
...
-----> Launching... done, v4
       http://evening-sky-7498.herokuapp.com deployed to Heroku
{% endhighlight %}

アプリのプッシュが終わってるのがわかりますか？ "Launching..." というテキストのところです。

#### データベースのマイグレート

そして、ワークショップでローカルにやったように、データベースのマイグレートをする必要があります。 : `heroku run rake db:migrate`

そのコマンドが実行されたら、 url でアプリを見ることができます。このアプリの例では、 [http://evening-sky-7498.herokuapp.com/](http://evening-sky-7498.herokuapp.com) です。もしくは、ターミナルで `heroku open` と入力すれば、そのページを見に行くことができます。

#### Closing notes

Heroku's platform is not without its quirks. Applications run on Heroku live within an ephermeral environment - this means that (except for information stored in your database) any files created by your application will disappear if it restarts (for example, when you push a new version).

###### [Ephemeral filesystem](https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem)
> Each dyno gets its own ephemeral filesystem, with a fresh copy of the most recently deployed code. During the dyno’s lifetime its running processes can use the filesystem as a temporary scratchpad, but no files that are written are visible to processes in any other dyno and any files written will be discarded the moment the dyno is stopped or restarted.

In the [App](/app) tutorial the ability to attach a file to the Idea record is added, which results in new files being written to your applications `public/uploads` folder. The ephemeral storage in Heroku can be seen with the following steps:

1. Launch the app with `heroku open`
2. Add a new Idea with an image
3. Restart the application by running `heroku restart`
4. Go back to your Idea and reload the page - the image should no longer be visible

##### Working around Ephemeral Storage

Obviously this doesn't seem to be useful if you were running a real life application, but there are ways to work around this which is commonly used by a lot of popular websites.

The most common method is to use an external asset host such as Amazon S3 (Simple Storage Service) or Rackspace CloudFiles. These services provide (for a low cost - usually less then $0.10 per GB) storage 'in the cloud' (meaning the files could potentially be hosted anywhere) which your application can use as persistent storage.

While this functionality is a bit out of scope for this tutorial there are some resources available which you can use to find your way:

* [How to: Make Carrierwave work on Heroku](https://github.com/carrierwaveuploader/carrierwave/wiki/How-to%3A-Make-Carrierwave-work-on-Heroku)
* [Amazon S3 - The Beginner' Guide](http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/)

As always if you require any more information or assistance your coaches will be able to assist.
