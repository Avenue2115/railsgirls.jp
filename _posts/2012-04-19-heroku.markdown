---
layout: default
title: Rails Girls Heroku にアップ
permalink: heroku
---

# Heroku に Rails アプリをアップ

*Created by Terence Lee, [@hone02](https://twitter.com/hone02)*

### Heroku の準備

#### Heroku のアカウントを作成しよう
アカウントの作成はもちろん無料です。

[ユーザ登録画面](https://id.heroku.com/signup)からアカウントを作成しましょう。

<img src="../images/heroku_sign_up.jpg" />


「Email」欄にメールアドレスを入力して「Sign Up」ボタンを押します。

しばらく待つと、確認＆登録用URL付きメールが届きますので、このURLにアクセスしましょう。

<img src="../images/heroku_confirmation.jpg" />


登録しようとしているメールアドレスに間違いがないか確認したら、Password（パスワード）とConfirm Password（パスワード再入力）にパスワードを入力します。

「Sign me up for Heroku email…」は heroku から寄せられる更新情報やイベント情報など、耳寄りな情報をメールで受信する場合、チェックを入れます。

「Save」ボタンを押すと登録完了です。


#### Heroku Toolbelt をインストールしよう
Heroku でコマンドライン操作を行うためのアプリケーションである、Heroku Toolbelt をインストールします。

ユーザ登録完了後はすでにログイン済みの状態になっているはずですが、なっていない場合や、すでにアカウントを持っている場合は、
[heroku ログイン](https://id.heroku.com/login) からログインしましょう。

自動的にダッシュボードと呼ばれる管理画面に進み、Heroku Toolbelt のダウンロードボタンが表示されているはずです。
「Download Heroku Toolbelt for...」のボタンを押して、ダウンロードを行い、そのままインストールしてください。
<img src="../images/heroku_dashboard.jpg" />

ダッシュボードに進まなかったり、Heroku Toolbelt のダウンロードボタンが表示されなかった場合は、以下のURLへ進んでください。

[Getting Started with Ruby on Heroku - Set up](https://devcenter.heroku.com/articles/getting-started-with-ruby#set-up)

<img src="../images/heroku_toolbelt_download.jpg" />



画面上に表示されている紫色のボタンからダウンロードを行い、Heroku Toolbelt のインストールを行います。



#### Heroku にコマンドラインでログインし、SSHキーを設定しよう

Heroku Toolbelt を無事ダウンロードできたら、ターミナル（Mac）またはコマンドプロンプト（Windows）を起動して、次のコマンドを入力しましょう。

{% highlight sh %}
heroku login
{% endhighlight %}

`Enter your Heroku credentials.（herokuの認証情報を入力してください）` と言われるので、先ほど登録したメールアドレスとパスワードを入力します。 

{% highlight sh %}
heroku login
Enter your Heroku credentials.
Email: rails-girls@example.com
Password:
{% endhighlight %}

メールアドレスは入力したそのまま画面上に表示されますが、パスワードは画面上に何も表示されません。

入力は正常に受け付けられているので、反応がなくても気にせずに最後まで打ち、エンターキーを押してください。

ログインに成功すると、今度は SSH で使用する公開鍵が見つからないため、作成するかどうか聞かれます。

{% highlight sh %}
Could not find an existing public key.
Would you like to generate one? [Yn]
{% endhighlight %}

「Y」キーを押して公開鍵の作成を行ってください。

{% highlight sh %}
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
{% endhighlight %}

自動的に公開鍵がherokuにもアップロードされ、以降はこの鍵を使用して heroku とのコマンドライン接続が行われるようになります。

heroku の準備はこれで終了です。


__Coachより__: Heroku か、従来のサーバーか、デプロイの利点について話してみましょう。

### アプリの準備

#### バージョン管理システム

作成したコードをバージョン管理システムに追加します。ターミナル上で次のコマンドを入力しましょう。:

{% highlight sh %}
git init
echo "public/uploads" >> .gitignore
echo "tmp" >> .gitignore
echo "logs" >> .gitignore
git add .
git commit -m "initial commit"
{% endhighlight %}

__Coachより__: バージョン管理システムと git について説明するちょうどいいタイミングです。.gitignore の説明と上記のファイルを管理対象外にしたい理由についても説明しましょう。

#### データベースのアップデート

まず、 Heroku で動くデータベースが必要です。いつものデータベースとは違います。 Gemfile を次のように変更しましょう。 :

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

↓

{% highlight ruby %}
group :development do
  gem 'sqlite3'
end
group :production do
  gem 'pg'
end
{% endhighlight %}

そして、 `bundle install --without production` を実行してセットアップしてください。

__Coachより__: RDBMS とそうでないものについて話してみましょう。Heroku 上の PostgreSQL の制限についても少し取り上げてみてください。

#### rails\_12factor の導入

次に、Heroku で Rails 4 を動かすために必要な rails\_12factor という gem を導入します。

この gem はアプリが Heroku 上で動作できるように、Rails の動作を変更します。例えば、ログは保存先が変更され、静的アセット(アプリの画像、スタイルシート、JavaScript ファイル) は Heroku 向けに微調整が加えられています。

Gemfile を次のように変更しましょう。:

{% highlight ruby %}
group :production do
  gem 'pg'
end
{% endhighlight %}

↓

{% highlight ruby %}
group :production do
  gem 'pg'
  gem 'rails_12factor'
end
{% endhighlight %}

もう一度、 `bundle install --without production` を実行してセットアップしてください。

{% highlight sh %}
git commit -a -m "Added rails_12factor gem and updated Gemfile.lock"
{% endhighlight %}

__Coachより__: Heroku におけるログの仕組みについて調べてみましょう。

### アプリのデプロイ

#### アプリのcreate

Heroku のアプリを作りましょう。ターミナルで `heroku create` と入力したら、次のようなものが見られます。 :

{% highlight sh %}
Creating evening-sky-7498... done, stack is cedar
http://evening-sky-7498.herokuapp.com/ | git@heroku.com:evening-sky-7498.git
Git remote heroku added
{% endhighlight %}

この場合では、 "evening-sky-7498" がアプリの名前です。

#### コードをpush

さて、 Heroku にコードを送信しましょう。 `git push heroku master` と入力してください。そうすると、こんな出力が見られるはずです。 :

{% highlight sh %}
Counting objects: 134, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (115/115), done.
Writing objects: 100% (134/134), 35.29 KiB, done.
Total 134 (delta 26), reused 0 (delta 0)

-----> Heroku receiving push
-----> Ruby/Rails app detected
-----> Installing dependencies using Bundler version 1.1.2
       Running: bundle install --without development:test --path vendor/bundle --binstubs bin/ --deployment
       Fetching gem metadata from https://rubygems.org/.......
...
-----> Launching... done, v4
       http://evening-sky-7498.herokuapp.com deployed to Heroku
{% endhighlight %}

アプリのプッシュが終わってるのがわかりますか？ "Launching..." というテキストのところです。

#### データベースのマイグレート

そして、ワークショップでローカルにやったように、データベースのマイグレートをする必要があります。 : `heroku run rake db:migrate`

そのコマンドが実行されたら、 url でアプリを見ることができます。このアプリの例では、 [http://evening-sky-7498.herokuapp.com/](http://evening-sky-7498.herokuapp.com) です。もしくは、ターミナルで `heroku open` と入力すれば、そのページを見に行くことができます。

#### おわりに

Heroku のプラットフォームは癖がない訳ではありません。Heroku 上のアプリは ephemeral な(再起動で一部のファイルが揮発する)環境で動作しています。- これは(データベースに保存された情報と push した情報を除く)全てのファイルがアプリの再起動で消えてしまうという事です。(例えば、新しいバージョンのプログラムを push した場合)

###### [Ephemeral ファイルシステム](https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem)
> Each dyno gets its own ephemeral filesystem, with a fresh copy of the most recently deployed code. During the dyno’s lifetime its running processes can use the filesystem as a temporary scratchpad, but no files that are written are visible to processes in any other dyno and any files written will be discarded the moment the dyno is stopped or restarted.
>
> (各 dyno は専用の ephemeral ファイルシステムを取得します。この領域には最新のデプロイしたプログラムもコピーされます。実行中のプロセスが dyno の生存期間にある間は、このファイルシステムを一時的なスクラッチパッドとして扱う事ができます。しかし、dynoが停止か再起動をした瞬間に出力されていたすべてのファイルはプロセスから見えなくなります)

[App](/app) では、追加した Idea レコードにファイルを添付する事ができます。このファイルはアプリの `public/uploads` フォルダ以下に配置されます。以下の手順で Heroku での ephemeral ストレージの動作を確認できます:

1. `heroku open` を実行してアプリを開きます
2. 新しい Idea に画像を付けて追加します
3. `heroku restart` を実行してアプリを再起動します
4. 追加した Idea を再度表示し、このページを reload します - 画像は表示されなくなります

##### Ephemeral ストレージの回避策

これは実際のアプリにとっては明らかに不便ですが、有名なサイトでも使われてる回避策がちゃんとあります。

最も一般的な回避策はAmazon S3(Simple Storage Service)やRackspace CloudFilesのような外部ホストの資源を利用する事です。これらのサービスは(安価な - 通常 0.1$/GB 以下の)アプリから永続的に利用可能なストレージを 'クラウド上に' 提供します(つまりファイルをどこへでも提供し得えます)。

この機能は少しだけこのチュートリアルの範囲から外れますが、以下のようなリソースを参考に、目的にあった方法を見つける事ができるでしょう。

* [How to: Make Carrierwave work on Heroku](https://github.com/carrierwaveuploader/carrierwave/wiki/How-to%3A-Make-Carrierwave-work-on-Heroku)
* [Amazon S3 - The Beginner' Guide](http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/)

いつものように、わからない事がある場合や手助けが必要な場合は担当のコーチが対応してくれます。
