---
layout: default
title: Rails Girls アプリを sqale で動かしてみよう
permalink: sqale
---

# Rails Girls アプリを sqale で動かしてみよう

*Created by Hiroshi SHIBATA, [@hsbt](https://twitter.com/hsbt)*

このドキュメントは[Ruby on Rails サンプルアプリケーションを Sqale でうごかしてみよう！ Mac 編](https://sqale.jp/support/manual/sample-rails-sftp-mac)をベースに RailsGirls アプリケーションを動かせるようにアップデートしたチュートリアルです。Windows を使用している場合は [Windows 編](https://sqale.jp/support/manual/sample-rails-sftp-win)に沿って適時読み替えてください。

## Step.1 Sqale のアカウントと秘密鍵を作成しよう

Sqale の [トップページ](http://sqale.jp/) から 【いますぐはじめる】 ボタンをクリックします。

![【いますぐはじめる】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_signup_01.jpg)

新規ユーザー登録 にて、ユーザー名、メールアドレス、パスワード、パスワード確認を入力後、利用規約を確認し同意後に 【登録する】 ボタンをクリックしてください。

![【登録する】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_signup_02.jpg)

以上で、新規登録が完了です。

![新規登録が完了です](https://sqale.jp/assets/manual/sample/sqale_signup_03.jpg)

公開鍵は、アプリケーションをアップロードしたり、SSH コマンドを利用して Sqale のサーバーに接続するために使用します。まず、 [ダッシュボード](https://sqale.jp/dashboard) にて、 【公開鍵の設定】 をクリックしてください。

![【公開鍵の設定】 をクリック](https://sqale.jp/assets/manual/sample/sqale_public_keys_01.jpg)

[公開鍵の設定](https://sqale.jp/settings/public_keys) ページが表示されます。ページ下部の新規公開鍵の作成にて、公開鍵の名前を入力後、【登録する】 ボタンをクリックしてください。

次に、秘密鍵の保存ダイアログが表示されますので任意の場所に保存してください。この秘密鍵は sqale にアプリケーションをアップロードするために必要なファイルですので大切に保管してください。

![【登録する】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_public_keys_02.jpg)

公開鍵の設定ページに、作成した公開鍵が表示されます。

![作成した公開鍵が表示されます](https://sqale.jp/assets/manual/sample/sqale_public_keys_03.jpg)

## Step.2 アプリケーションを作成する

公開するアプリケーションを作成します。[ダッシュボード](https://sqale.jp/dashboard) にて、 【新しいアプリケーションを作成】 ボタンをクリックしてください。

![【新しいアプリケーションを作成】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_new_application_01.jpg)

[新規アプリケーション作成](https://sqale.jp/projects/new) ページが表示されます。アプリケーション名として railsgirls を入力後、 【アプリケーションを作成】 ボタンをクリックしてください。

![【アプリケーションを作成】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_new_application_02.jpg)

アプリケーションが作成、初期化されます。30秒後にページをリロードしてください。

![アプリケーションが作成、初期化されます](https://sqale.jp/assets/manual/sample/sqale_new_application_03.jpg)

リロードするとアプリケーション詳細ページが表示されます。

![アプリケーション詳細ページ](https://sqale.jp/assets/manual/sample/sqale_new_application_04.jpg)

以上でアプリケーションが作成されました。

__COACHより__: Sqale や Heroku のような PaaS と従来のサーバーを比べてデプロイの利点について話してみましょう。

## Step.3 アプリケーションの準備

Sqale でデータベースを利用したアプリケーションを動かすには、アプリケーションの設定を変更し、データベースの情報をアプリケーションの設定ファイルに記述する必要があります。まず最初にGemfile を次のように変更しましょう。

変更前

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

変更後

{% highlight ruby %}
group :development do
  gem 'sqlite3'
end
group :production do
  gem 'mysql2'
end
{% endhighlight %}

続いて、アプリケーション詳細ページにて、 【データベース接続情報】 ボタンをクリックしてください。

![【データベース接続情報】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_shared_database_01.jpg)

データベース接続情報が表示されます。【Rails の database.yml 形式でコピー】 の横にあるコピーボタンをクリックしてください。

![【Rails の database.yml 形式でコピー】 の横にあるコピーボタンをクリックし](https://sqale.jp/assets/manual/sample/sqale_shared_database_02.jpg)

copied! と表示されれば、クリップボードにデータベース接続情報がコピーされます。

![copied!](https://sqale.jp/assets/manual/sample/sqale_shared_database_03.jpg)

サンプルアプリケーションのフォルダに移動し、config フォルダ内の 【database.yml】 をテキストエディタで編集します。

![database.yml](https://sqale.jp/assets/manual/sample/sqale_shared_database_04.jpg)

以下の部分を削除し、クリップボードにコピーしたデータベース情報をペーストしてファイルを上書き保存してください。

変更前

{% highlight yaml %}
production:
  adapter: sqlite3
  database: db/production.sqlite3
  pool: 5
  timeout: 5000
{% endhighlight %}

変更後

{% highlight yaml %}
production:
  adapter: mysql2
  encoding: utf8
  username: sqale_**********
  password: ************************************************
  database: sqale_**********
  host: mysql001.sqale.jp
{% endhighlight %}

以上で、データベース情報の設定は完了です。

__COACHより__: sqlite3 と MySQL/PostgreSQL の違いについて話してみましょう。

## Step.4 アプリケーションのデプロイ

Sqale にアプリケーションをデプロイする方法を選択します。[アカウント設定ページ](https://sqale.jp/settings/account)に移動してください。現在のデプロイ設定が【Git】になっている場合は、
【SFTP】を選択して【更新する】ボタンをクリックしてください。

![SFTPを選択](http://sqale.jp/assets/manual/sample/deploy-type-select.png)

以下のように、現在のデプロイ設定がSFTPに変更されていればデプロイ設定の変更は完了です。

![SFTPに変更できました!](https://sqale.jp/assets/manual/sample/deploy-type-sftp.png)

サンプルアプリケーションを Sqale のサーバーにアップロードします。Cyberduck を起動し、【新規接続】 ボタンをクリックしてください。

![【新規接続】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_01.jpg)

新規接続画面が表示されます。【SFTP】 を選択し、サーバ、ポート、ユーザ名に以下の情報を入力してください。

<table>
  <tbody>
    <tr>
      <th>サーバ</th><td>gateway.sqale.jp</td>
    </tr>
    <tr>
      <th>ポート</th><td>2222</td>
    </tr>
    <tr>
      <th>ユーザ名</th><td>sqale</td>
    </tr>
  </tbody>
</table>

入力後、詳細設定にて 【公開鍵認証を使用する】 をクリックしてください。ファイル選択ダイアログが表示されますので、さきほど保存した秘密鍵ファイルを選択してください。

![【公開鍵認証を使用する】 をクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_02.jpg)

秘密鍵を選択すると、 【公開鍵認証を使用する】 の下に選択したファイル名が表示されます。【接続】ボタンをクリックしてください。

![【接続】ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_03.jpg)

【不明なホスト鍵 gateway.sqale.jp.】 とダイアログが表示された場合は、【常に】 にチェックを入れ 【許可】 ボタンをクリックしてください。

![【常に】 にチェックを入れ 【許可】 ボタンをクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_04.jpg)

接続後、自分のユーザー名のフォルダが表示されます。フォルダをダブルクリックしてください。

![フォルダをダブルクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_05.jpg)

作成したアプリケーション名のフォルダが表示されます。フォルダをダブルクリックしてください。

![フォルダをダブルクリック](https://sqale.jp/assets/manual/sample/sqale_cyberduck_06.jpg)

アプリケーションをアップロードするフォルダに移動しました。

解凍したアプリケーションのファイルを Cyberduck 上にドラッグ＆ドロップし、アップロードしてください。

![Cyberduck](https://sqale.jp/assets/manual/sample/sqale_cyberduck_07.jpg)

アプリケーションを正常に動作させるためには【current】直下にファイルをアップロードさせる必要があります。

アップロード後に以下のような構成になっているかどうか、ご確認ください。

![ディレクトリ構成](https://sqale.jp/assets/manual/sample/deploy-directory.jpg)

アップロードが完了すると、ファイル一覧が表示されます。

![ファイル一覧](https://sqale.jp/assets/manual/sample/sqale_cyberduck_08.jpg)

[ダッシュボード](https://sqale.jp/dashboard) に戻り、アクティビティにて【デプロイが完了しました】 と表示されていればアップロードが完了しています。

![アクティビティ](https://sqale.jp/assets/manual/sample/sqale_cyberduck_09.jpg)

以上で Cyberduck を使用した SFTP アップロードでアプリケーションのデプロイが完了しました。

## Step.5 データベースのテーブルを作成する

sqale のダッシュボード画面を確認してアプリケーションのデプロイが完了していたら、データベースのマイグレーションを実行します。

ファイルをアップロード後、Sqale 上にデータベースのテーブルを作成する必要があります。

Sqale には、ダッシュボードのボタンを押すだけで、データベースのテーブルを作成しアプリケーションを再起動することができます。

![db:migrate ボタン](https://sqale.jp/assets/manual/sample/sqale_application_operation.jpg)

ダッシュボードの [アプリケーション一覧](https://sqale.jp/dashboard) から作成したアプリケーションの【詳細】ボタンをクリック、その後【アプリケーションの操作】タブをクリックし、【マイグレーションの実行】の【実行する】ボタンをクリックするとデータベースのテーブルを作成し、アプリケーションを再起動します。

__COARCHより__: データベースのマイグレーションは何をしているかを話してみましょう

## Step.6 アプリケーションを確認しよう

これまでの内容で全てのアプリケーション公開作業は完了です。アプリケーション詳細ページに戻り、表示されているURLをクリックしてください。

![URLをクリック](http://sqale.jp/assets/manual/sample/sqale_sample_application_url.jpg)

以上で手元で作成した Rails Girls アプリケーションを公開する事ができました。

### アプリケーションのデプロイ、もう一つの方法

Sqale では簡単にアプリケーションを公開する方法の他にも他の PaaS と同様にバージョン管理システムの git を使ったデプロイが可能です。Rails Girls アプリケーションの何処かを変更してから試してみましょう。

git を使ってデプロイするにはアプリケーションに git の情報を設定します。まず最初にターミナルで次のコマンドを実行します。:

{% highlight sh %}
git init
git add .
git commit -m "initial commit"
{% endhighlight %}

__COACHより__: バージョン管理と git について、プログラミングをする時に何が便利かを話してみましょう。

次にアプリケーションのダッシュボードにある Git の SSH という項目をコピーしてから、次のコマンドを実行します。

{% highlight sh %}
git remote add origin [ダッシュボードからコピーした値]
{% endhighlight %}

最後にアプリケーションのダッシュボードのアカウント設定をクリックし、デプロイ設定の項目を　SFTP から Git に変更します。

#### コードをpush

これで Git を使う準備が完了しました。Sqale にコードをプッシュしましょう。 `git push origin master` と入力してください。プッシュ後にダッシュボードを確認してアプリケーションのデプロイが完了したという表示が出ていれば成功です。
